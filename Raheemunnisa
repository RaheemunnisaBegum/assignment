from tkinter import Y
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from dash import Dash, html, dcc
import plotly.express as px


dataset= pd.read_csv("Assignment\survey.csv")

pd.set_option("Display.max_columns", 40)
pd.set_option("Display.max_rows", 40)

my_data = dataset[["Age", "Gender", "Country", "family_history", "treatment"
                    ,"mental_health_consequence", "phys_health_consequence"
                     , "remote_work", "tech_company"]]

print(my_data)
#Correction of mental and physical consequence column
my_data.loc[(my_data['mental_health_consequence']).isin(['Yes', 'Maybe']),"mental_health_consequence"] = "Yes"
my_data.loc[(my_data['phys_health_consequence'].isin(['Yes', 'Maybe'])),"phys_health_consequence"] = "Yes"

# Correction of Country column
my_data.loc[(my_data['Country']).isin(['Mexico' ,'Canada', 'United States' ]),"Country"] = "North_America"

my_data.loc[(my_data['Country']).isin(['Germany' ,'Bulgaria' ,'France' ,'Portugal',
                         'Netherlands' ,'Switzerland' ,'Poland', 'United Kingdom']),"Country"] = "Europe"

my_data.loc[(my_data['Country']).isin(['Singapore' ,'Thailand' ,'China' ,'Croatia',
                         'Japan' ,'Nigeria' ,'India', 'Bahamas','Finland', 'Philippines']),"Country"] = "Asia"
my_data.loc[(my_data['Country']).isin(['New Zealand' ,'Russia', 'Brazil', 'Slovenia',
                        'Costa Rica' ,'Austria' ,'Ireland', 'Australia' ]),"Country"] = "Islands"
my_data.loc[(my_data['Country']).isin(['Czech Republic' ,'Italy' ,'Sweden',
                        'Colombia', 'Latvia' ,'Romania' ,'Belgium' ,'Zimbabwe', 'Spain' ,'Uruguay',
                        'Israel', 'Bosnia and Herzegovina', 'Hungary' ,'Norway' ,'Denmark',
                        'Bahamas, The' ,'Greece', 'Moldova' ,'Georgia' ,'South Africa']),"Country"] = "Africa"

# Correction of gender column
my_data.loc[(my_data['Gender'].isin(['Female','female', 'F','f', 'Femake',
                        'Woman','woman','Female ' ,'cis-female/femme',  'Female (cis)','Cis Female',
                         'femail','p' ])),"Gender"] = "Female"
my_data.loc[(my_data['Gender'].isin(['M', 'Male' ,'male','m' ,'Male-ish', 'maile', 'Cis Male',
                        'Mal','Male (CIS)', 'Make','male leaning androgynous' ,'Male ',
                        'Man', 'msle',  'Mail', 'cis male', 'Malr', 'Cis Man',
                        'Cis Man','ostensibly male'])),"Gender"] = "Male"
my_data.loc[(my_data['Gender'].isin(['Trans-female','something kinda male?','queer/she/they' ,'Nah',
                        'non-binary' ,'All' ,'Enby', 'fluid', 'Genderqueer', 'Androgyne', 'Agender','queer',
                        'Guy (-ish) ^_^', 'Trans woman','Neuter',  'Female (trans)', 'queer',
                       'A little about you', 'ostensibly male, unsure what that really means'])),"Gender"] = "Non-Binary"

#print(main_data['Gender'].unique())
#print(main_data['phys_health_consequence'].unique())

my_data.groupby('Country')

print(my_data)

fig = px.bar(my_data, x = "Gender", y = "mental_health_consequence", color ="Country", barmode = "group" )
app = Dash(__name__)

app.layout = html.Div(children=[
    html.H1(children='Hello Dash'),

    html.Div(children = '''
    Dash: A Web Application frame-work for your Data.'''),

     dcc.Graph(id = 'example-graph',
        figure = fig),


])

if __name__ == '_main_':
    app.run_server(debug = True)
